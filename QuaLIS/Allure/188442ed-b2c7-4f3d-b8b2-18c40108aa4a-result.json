{"name": "test_unitAdd", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 97\nCurrent browser version is 99.0.4844.82 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x0096FDC3+2555331]\n\tOrdinal0 [0x009077F1+2127857]\n\tOrdinal0 [0x00802E08+1060360]\n\tOrdinal0 [0x008219CA+1186250]\n\tOrdinal0 [0x0081D825+1169445]\n\tOrdinal0 [0x0081AFC1+1159105]\n\tOrdinal0 [0x0084C22F+1360431]\n\tOrdinal0 [0x0084BE9A+1359514]\n\tOrdinal0 [0x00847976+1341814]\n\tOrdinal0 [0x008236B6+1193654]\n\tOrdinal0 [0x00824546+1197382]\n\tGetHandleVerifier [0x00B09622+1619522]\n\tGetHandleVerifier [0x00BB882C+2336844]\n\tGetHandleVerifier [0x00A023E1+541697]\n\tGetHandleVerifier [0x00A01443+537699]\n\tOrdinal0 [0x0090D18E+2150798]\n\tOrdinal0 [0x00911518+2168088]\n\tOrdinal0 [0x00911660+2168416]\n\tOrdinal0 [0x0091B330+2208560]\n\tBaseThreadInitThunk [0x758B6739+25]\n\tRtlGetFullPathName_UEx [0x76FA8E7F+1215]\n\tRtlGetFullPathName_UEx [0x76FA8E4D+1165]", "trace": "@pytest.fixture(scope=\"function\")\n    def preCondition():\n        global driver\n>       driver = BrowserOperation.launchLIMS()\n\nd.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nUtility\\BrowserOperation.py:22: in launchLIMS\n    driver = webdriver.Chrome(executable_path=\"D:\\\\driver\\\\chromedriver.exe\")\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: in __init__\n    self.start_session(capabilities, browser_profile)\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000225B0C40550>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...unk [0x758B6739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x76FA8E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x76FA8E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 97\nE       Current browser version is 99.0.4844.82 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x0096FDC3+2555331]\nE       \tOrdinal0 [0x009077F1+2127857]\nE       \tOrdinal0 [0x00802E08+1060360]\nE       \tOrdinal0 [0x008219CA+1186250]\nE       \tOrdinal0 [0x0081D825+1169445]\nE       \tOrdinal0 [0x0081AFC1+1159105]\nE       \tOrdinal0 [0x0084C22F+1360431]\nE       \tOrdinal0 [0x0084BE9A+1359514]\nE       \tOrdinal0 [0x00847976+1341814]\nE       \tOrdinal0 [0x008236B6+1193654]\nE       \tOrdinal0 [0x00824546+1197382]\nE       \tGetHandleVerifier [0x00B09622+1619522]\nE       \tGetHandleVerifier [0x00BB882C+2336844]\nE       \tGetHandleVerifier [0x00A023E1+541697]\nE       \tGetHandleVerifier [0x00A01443+537699]\nE       \tOrdinal0 [0x0090D18E+2150798]\nE       \tOrdinal0 [0x00911518+2168088]\nE       \tOrdinal0 [0x00911660+2168416]\nE       \tOrdinal0 [0x0091B330+2208560]\nE       \tBaseThreadInitThunk [0x758B6739+25]\nE       \tRtlGetFullPathName_UEx [0x76FA8E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x76FA8E4D+1165]\n\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException"}, "start": 1648110856962, "stop": 1648110856962, "uuid": "77d01751-a72b-4da9-a936-bc1aa972f061", "historyId": "a0d1b510cfb4998b591dc83715ff0086", "testCaseId": "da1c59cbd2d96f5d09421f8ef8400b43", "fullName": "d#test_unitAdd", "labels": [{"name": "suite", "value": "d"}, {"name": "host", "value": "AGL78"}, {"name": "thread", "value": "16152-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "d"}]}