{"name": "test_exportPDF", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: chrome not reachable\n  (Session info: chrome=100.0.4896.127)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00E59943+2595139]\n\tOrdinal0 [0x00DEC9F1+2148849]\n\tOrdinal0 [0x00CE43F0+1065968]\n\tOrdinal0 [0x00CD87C2+1017794]\n\tOrdinal0 [0x00CD8FF8+1019896]\n\tOrdinal0 [0x00CDA892+1026194]\n\tOrdinal0 [0x00CD4219+999961]\n\tOrdinal0 [0x00CE5860+1071200]\n\tOrdinal0 [0x00D3B2D2+1422034]\n\tOrdinal0 [0x00D2B806+1357830]\n\tOrdinal0 [0x00D06086+1204358]\n\tOrdinal0 [0x00D06F96+1208214]\n\tGetHandleVerifier [0x00FFB232+1658114]\n\tGetHandleVerifier [0x010B312C+2411516]\n\tGetHandleVerifier [0x00EEF261+560433]\n\tGetHandleVerifier [0x00EEE366+556598]\n\tOrdinal0 [0x00DF286B+2173035]\n\tOrdinal0 [0x00DF75F8+2192888]\n\tOrdinal0 [0x00DF76E5+2193125]\n\tOrdinal0 [0x00E011FC+2232828]\n\tBaseThreadInitThunk [0x76C96739+25]\n\tRtlGetFullPathName_UEx [0x76FF8E7F+1215]\n\tRtlGetFullPathName_UEx [0x76FF8E4D+1165]", "trace": "def test_exportPDF():\n        TestCoverageUnit.downloadPDF(driver)\n>       BrowserOperation.refreshLogin(driver)\n\nTestCaseUnit.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nUtility\\BrowserOperation.py:127: in refreshLogin\n    driver.refresh()\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1061: in refresh\n    self.execute(Command.REFRESH)\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000230002BA7F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"chrome not reachable\",\"message\":\"chrome not reachable\\\\n  (Session info: ...unk [0x76C96739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x76FF8E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x76FF8E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: chrome not reachable\nE         (Session info: chrome=100.0.4896.127)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00E59943+2595139]\nE       \tOrdinal0 [0x00DEC9F1+2148849]\nE       \tOrdinal0 [0x00CE43F0+1065968]\nE       \tOrdinal0 [0x00CD87C2+1017794]\nE       \tOrdinal0 [0x00CD8FF8+1019896]\nE       \tOrdinal0 [0x00CDA892+1026194]\nE       \tOrdinal0 [0x00CD4219+999961]\nE       \tOrdinal0 [0x00CE5860+1071200]\nE       \tOrdinal0 [0x00D3B2D2+1422034]\nE       \tOrdinal0 [0x00D2B806+1357830]\nE       \tOrdinal0 [0x00D06086+1204358]\nE       \tOrdinal0 [0x00D06F96+1208214]\nE       \tGetHandleVerifier [0x00FFB232+1658114]\nE       \tGetHandleVerifier [0x010B312C+2411516]\nE       \tGetHandleVerifier [0x00EEF261+560433]\nE       \tGetHandleVerifier [0x00EEE366+556598]\nE       \tOrdinal0 [0x00DF286B+2173035]\nE       \tOrdinal0 [0x00DF75F8+2192888]\nE       \tOrdinal0 [0x00DF76E5+2193125]\nE       \tOrdinal0 [0x00E011FC+2232828]\nE       \tBaseThreadInitThunk [0x76C96739+25]\nE       \tRtlGetFullPathName_UEx [0x76FF8E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x76FF8E4D+1165]\n\ne:\\github\\qualis\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: WebDriverException"}, "attachments": [{"name": "log", "source": "2ee8776b-fda0-4639-b857-ff0c06f7f28b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "0979688d-19a4-42e0-ab2a-9530e02323d5-attachment.txt", "type": "text/plain"}], "start": 1650621007083, "stop": 1650621087237, "uuid": "2f044c24-3e4a-4598-b468-fffbc7fca049", "historyId": "f0c20ba510fbdc641313193f06c8b2d9", "testCaseId": "8a96547bc5152cf5b06cbf7aa4e17f1d", "fullName": "TestCaseUnit#test_exportPDF", "labels": [{"name": "suite", "value": "TestCaseUnit"}, {"name": "host", "value": "AGL78"}, {"name": "thread", "value": "21384-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCaseUnit"}]}